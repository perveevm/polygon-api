package ru.perveevm.polygon.api;

import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

/**
 * Builder that is used to configure {@link PolygonSession} instance.
 *
 * @author Mike Perveev (perveev_m@mail.ru)
 */
public class PolygonSessionBuilder {
    private PolygonSession session;

    private PolygonSessionBuilder(final String key, final String secret) {
        this.session = new PolygonSession(key, secret);
    }

    /**
     * Sets API key and secret.
     *
     * @param key    API key that was generated by Polygon.
     * @param secret API secret that was generated by Polygon.
     * @return {@link PolygonSessionBuilder} with configured API key and secret.
     */
    public static PolygonSessionBuilder withCredentials(final String key, final String secret) {
        return new PolygonSessionBuilder(key, secret);
    }

    /**
     * Builds {@link PolygonSession} with default parameters. This instance will not retry requests if Polygon API
     * is not available.
     *
     * @param key    API key that was generated by Polygon.
     * @param secret API secret that was generated by Polygon.
     * @return Initialized {@link PolygonSession} instance.
     */
    public static PolygonSession defaultPolygonSession(final String key, final String secret) {
        return withCredentials(key, secret)
                .withMaxRetries(0)
                .build();
    }

    /**
     * Builds {@link PolygonSession} with default retry parameters. This instance will retry requests if Polygon API
     * is not available using the following scheme.
     *
     * <ul>
     *     <li>Max number of retries is 5.</li>
     *     <li>The first retry will be done after 100ms.</li>
     *     <li>The total wait time will not exceed 60s. If the API doesn't respond after this time, retrying
     *     will be terminated.</li>
     *     <li>Each time gap between two consecutive retries will be increased twice from the previous gap.</li>
     * </ul>
     *
     * @param key    API key that was generated by Polygon.
     * @param secret API secret that was generated by Polygon.
     * @return Initialized {@link PolygonSession} instance.
     */
    public static PolygonSession defaultRetryPolygonSession(final String key, final String secret) {
        return withCredentials(key, secret).build();
    }

    /**
     * Builds {@link PolygonSession} with parameters that were set before.
     *
     * @return Initialized {@link PolygonSession} instance.
     */
    public PolygonSession build() {
        return session;
    }

    /**
     * Sets the base URL of the Polygon API. The default value is
     * <a href="https://polygon.codeforces.com/api/">https://polygon.codeforces.com/api/</a>.
     *
     * @param baseUrl The URL of the Polygon API.
     * @return Modified instance of {@link PolygonSessionBuilder}.
     */
    public PolygonSessionBuilder withBaseUrl(final String baseUrl) {
        this.session.setBaseUrl(baseUrl);
        return this;
    }

    /**
     * Sets the HTTP client that will be used to perform requests to the API. The default value is created using
     * {@link HttpClients#createDefault()}.
     *
     * @param client The instance of {@link CloseableHttpClient} interface.
     * @return Modified instance of {@link PolygonSessionBuilder}.
     */
    public PolygonSessionBuilder withClient(final CloseableHttpClient client) {
        this.session.setClient(client);
        return this;
    }

    /**
     * Sets the time that will be skipped before the first retry.
     *
     * @param startWaitMs The time that will be skipped before the first retry in milliseconds.
     * @return Modified instance of {@link PolygonSessionBuilder}.
     */
    public PolygonSessionBuilder withStartWaitMs(final long startWaitMs) {
        this.session.setStartWaitMs(startWaitMs);
        return this;
    }

    /**
     * Sets the max total time that will be skipped during all retries.
     *
     * @param maxTotalWaitMs The max total time that will be skipped during all retries in milliseconds.
     * @return Modified instance of {@link PolygonSessionBuilder}.
     */
    public PolygonSessionBuilder withMaxTotalWaitMs(final long maxTotalWaitMs) {
        this.session.setMaxTotalWaitMs(maxTotalWaitMs);
        return this;
    }

    /**
     * Sets the coefficient that will be used to multiply the amount of time that will be skipped. For example,
     * if the previous time skip before the retry was equal to 1500ms, and the coefficient is 2.0, the time skip before
     * the next retry will be equal to 3000ms.
     *
     * @param waitCoefficient The coefficient that will be used to multiply the amount of time that will be skipped.
     * @return Modified instance of {@link PolygonSessionBuilder}.
     */
    public PolygonSessionBuilder withWaitCoefficient(final double waitCoefficient) {
        this.session.setWaitCoefficient(waitCoefficient);
        return this;
    }

    /**
     * Sets the maximum number of retries that will be done.
     *
     * @param maxRetries The maximum number of retries that will be done.
     * @return Modified instance of {@link PolygonSessionBuilder}.
     */
    public PolygonSessionBuilder withMaxRetries(final int maxRetries) {
        this.session.setMaxRetries(maxRetries);
        return this;
    }
}
